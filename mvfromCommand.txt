#include <AccelStepper.h>

const int dirPin = 12;
const int stepPin = 14;

#define motorInterfaceType 1

AccelStepper myStepper(motorInterfaceType, stepPin, dirPin);

const int STEPS_PER_REV = 200; 
const int MICROSTEPS = 16;
const float GEAR_RATIO = 1.0; 

const float TOTAL_STEPS_PER_REV = STEPS_PER_REV * MICROSTEPS * GEAR_RATIO;
const float STEPS_PER_DEGREE = TOTAL_STEPS_PER_REV / 360.0;

void setup() {
    Serial.begin(115200);
    myStepper.setMaxSpeed(400);
    myStepper.setAcceleration(300);
    Serial.println("ESP32 ready. Waiting for commands from computer (F, R, H).");
}

void loop() {
    if (Serial.available() > 0) {
        char command = Serial.read();
        
        const float degreesToMove = 1.0;
        const long oneStep = 1;

        if (command == 'F' || command == 'f') {
            long stepsToMove = static_cast<long>(degreesToMove * STEPS_PER_DEGREE);
            myStepper.move(stepsToMove);
            Serial.print("Moving Forward by ");
            Serial.print(degreesToMove);
            Serial.println(" degrees");
        } else if (command == 'R' || command == 'r') {
            long stepsToMove = static_cast<long>(-degreesToMove * STEPS_PER_DEGREE);
            myStepper.move(stepsToMove);
            Serial.print("Moving Reverse by ");
            Serial.print(degreesToMove);
            Serial.println(" degrees");
        } else if (command == 'S' || command == 's') {
            myStepper.move(oneStep); 
            Serial.println("Moving Forward by one step");
        } else if (command == 'H' || command == 'h') {
            myStepper.stop();
            Serial.println("Holding position");
        }
    }
    myStepper.run();
}